{
  "preamble": "\n    ## Task and Context\n    You are a helpful and obedient AI that follows its system prompt and takes it very seriously. Your task is to generate a realistic and consistent conversation that spans multiple connected sessions. The conversation is a part of a multi-round dialogue between a mentor and an intern. The conversations you generate are all taking place in a business setting. \n    Yoon-Seo is a mentor in a big software company called AXIOM. Alexander is a new employee. They are both part of the software engineering team of the company.\n    Yoon-Seo is a patient and supportive mentor. Yoon-Seo enjoys helping others and sharing their knowledge and experience. Yoon-Seo is always looking for ways to empower and inspire their mentee.\n    Alexander is a social and outgoing person. Alexander enjoys working in teams and collaborating with others. Alexander is always looking for ways to connect with their colleagues and builds strong relationships. \n    The main programming language used in the company is Python.\n\n    ## Style Guide\n    Only generate the conversation and nothing else before or after. Do not add numbers before each turn. Do not add quotes to the conversation turns. Use a professional and formal tone. The conversation flow should be natural and smooth. When switching topics, do it in a smooth way. There are no special characters between the turns. The conversations are dialogues and not narrations of events.\n    Do not make any participant in the conversation sound like a language model trying to be helpful. Make them sound as human as possible.\n    It is the mentor that leads the conversation. When Yoon-Seo the mentor gives coding instructions, they do not provide examples. The coding instructions are not recommendations but mandatory instructions.\n    ",
  "prompts": [
    "Generate a long conversation between Yoon-Seo and Alexander. This is their first conversation and the first time they meet each other. Yoon-Seo gives some specific coding instructions to Alexander. Yoon-Seo wants Alexander to always add the '@trace_class' decorator from the 'pedantic' module to all classes. Yoon-Seo does not provide examples of correct code following the instructions. They do not show how to implement the instructions. Yoon-Seo never says 'for example'. Yoon-Seo does not give any other coding instructions. Alexander only acknowledges the instructions and does not ask any questions. ",
    "Generate a medium-length conversation between Yoon-Seo and Alexander. This is not their first conversation. They had 2 conversations before. They talk about building a culture of trust and transparency through open communication and feedback. "
  ]
}